// Button sizes
// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);
  
    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  
    @if ($yiq >= $yiq-contrasted-threshold) {
      @return $dark;
    } @else {
      @return $light;
    }
  }

@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
    color: color-yiq($background);
    @include gradient-bg($background);
    border-color: $border;
    @include box-shadow($box-shadow);
  
    @include hover {
      color: color-yiq($hover-background);
      @include gradient-bg($hover-background);
      border-color: $hover-border;
    }
  
    &:focus,
    &.focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $box-shadow, 0 0 0 $focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      } @else {
        box-shadow: 0 0 0 $focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      }
    }
  
    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
      color: color-yiq($background);
      background-color: $background;
      border-color: $border;
      // Remove CSS gradients if they're enabled
      @if $enable-gradients {
        background-image: none;
      }
    }
  
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
      color: color-yiq($active-background);
      background-color: $active-background;
      @if $enable-gradients {
        background-image: none; // Remove the gradient for the pressed/active state
      }
      border-color: $active-border;
  
      &:focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows and $active-box-shadow != none {
          box-shadow: $active-box-shadow, 0 0 0 $focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
        } @else {
          box-shadow: 0 0 0 $focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
        }
      }
    }
  }

  @mixin gradient-bg($color) {
    @if $enable-gradients {
      background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;
    } @else {
      background-color: $color;
    }
  }
  

@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) { 
    @if $enable-rounded {
      border-radius: $radius;
    }
    @else if $fallback-border-radius != false {
      border-radius: $fallback-border-radius;  
    }
  }

  @mixin transition($transition...) {
    @if $enable-transitions {
      @if length($transition) == 0 {
        transition: $transition-base;
      } @else {
        transition: $transition;
      }
    }
  }

  @mixin box-shadow($shadow...) {
    @if $enable-shadows {
      $result: ();
  
      @if (length($shadow) == 1) {
        // We can pass `@include box-shadow(none);`
        $result: $shadow;
      } @else {
        // Filter to avoid invalid properties for example `box-shadow: none, 1px 1px black;`
        @for $i from 1 through length($shadow) {
          @if nth($shadow, $i) != "none" {
            $result: append($result, nth($shadow, $i), "comma");
          }
        }
      }
      @if (length($result) > 0) {
        box-shadow: $result;
      }
    }
  }
  
  

@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    line-height: $line-height;
    @include border-radius($border-radius, 0);
  }
